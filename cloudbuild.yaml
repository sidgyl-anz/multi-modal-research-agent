steps:
  # --- API Backend Service ---
  - name: 'gcr.io/cloud-builders/docker'
    args: [
        'build',
        '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-deploy/multi-modal-researcher-api:$COMMIT_SHA',
        '-f', 'Dockerfile', # Specify the Dockerfile for the API
        '.'
      ]
    id: 'Build API Backend'

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-deploy/multi-modal-researcher-api:$COMMIT_SHA']
    id: 'Push API Backend'
    waitFor: ['Build API Backend']

 - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy API Backend'
    secretEnv: ['GEMINI_API_KEY']
    waitFor: ['Push API Backend']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "DEBUG (cloudbuild.yaml): GEMINI_API_KEY from env. First 5: $${GEMINI_API_KEY:0:5}, Length: $${#GEMINI_API_KEY}"
        gcloud run deploy multi-modal-researcher-api \
          --image=us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-deploy/multi-modal-researcher-api:$COMMIT_SHA \
          --region=$_REGION \
          --platform=managed \
          --allow-unauthenticated \
          --port=8080 \
          --set-env-vars="GEMINI_API_KEY=$${GEMINI_API_KEY},GCS_BUCKET_NAME=$_GCS_BUCKET_NAME"
        # Note: API Service account needs GCS write and Service Account Token Creator roles.
        
  # --- Streamlit Frontend Service ---
  - name: 'gcr.io/cloud-builders/docker'
    args: [
        'build',
        '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-deploy/multi-modal-researcher-frontend:$COMMIT_SHA',
        '-f', 'Dockerfile.frontend', # Specify the Dockerfile for the Frontend
        '.'
      ]
    id: 'Build Frontend'

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-deploy/multi-modal-researcher-frontend:$COMMIT_SHA']
    id: 'Push Frontend'
    waitFor: ['Build Frontend']

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'multi-modal-researcher-frontend' # Frontend Service Name
      - '--image=us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-deploy/multi-modal-researcher-frontend:$COMMIT_SHA'
      - '--region=us-central1'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--port=8080' # Cloud Run expects the app to listen on PORT (default 8080), Streamlit CMD uses ${PORT:-8501}
      - '--set-env-vars=API_INVOKE_URL=$_API_INVOKE_URL'
      # Note: _API_INVOKE_URL needs to be the full invoke URL of the API service,
      # e.g., https://multi-modal-researcher-api-[hash]-uc.a.run.app/research_agent/invoke
      # This will be passed as a substitution variable by the user.
    id: 'Deploy Frontend'
    waitFor: ['Push Frontend', 'Deploy API Backend'] # Deploy frontend after API is deployed (good practice, though URL is external)

# Configuration for secrets and substitutions
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/GEMINI_API_KEY/versions/latest
    env: 'GEMINI_API_KEY'

# User needs to define these substitution variables when running `gcloud builds submit`:
# _GCS_BUCKET_NAME for the API backend (e.g., your-gcs-bucket)
# _API_INVOKE_URL for the Frontend (e.g., https://api-service-url/research_agent/invoke)

# Store images in Artifact Registry
images:
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-deploy/multi-modal-researcher-api:$COMMIT_SHA'
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-deploy/multi-modal-researcher-frontend:$COMMIT_SHA'

# Substitutions (can be overridden at build time)
substitutions:
  _REGION: 'us-central1'

# Options
options:
  logging: CLOUD_LOGGING_ONLY
